from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from loguru import logger
from config.config import settings

from services.api_client import APIClient
from models.schemas import TelegramVerificationRequest

router = Router()

class VerificationStates(StatesGroup):
    waiting_for_token = State()

@router.message(Command("start"))
async def cmd_start(message: Message, api_client: APIClient):
    user = message.from_user
    telegram_username = f"@{user.username}" if user.username else str(user.id)
    
    # Pass both telegram username and chat_id
    response = await api_client.verify_telegram(
        telegram=telegram_username,
        chat_id=message.chat.id
    )
    
    if response and response.get("success"):
        if response.get("message") == "Telegram already verified":
            await message.answer(
                "‚úÖ –í–∞—à Telegram —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /products –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏."
            )
        else:
            verification_token = response.get("message")
            await message.answer(
                f"üîê –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                f"{settings.FRONTEND_URL}/verify-telegram?token={verification_token}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
            )
    else:
        await message.answer(
            "‚ùå –í–∞—à Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å "
            "–Ω–∞ —Å–∞–π—Ç–µ –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç Telegram –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
        )

@router.message(Command("verify"))
async def cmd_verify(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
    )
    await state.set_state(VerificationStates.waiting_for_token)

@router.message(VerificationStates.waiting_for_token)
async def process_verification_token(message: Message, state: FSMContext, api_client: APIClient):
    token = message.text.strip()
    chat_id = message.chat.id
    
    response = await api_client.link_telegram_account(token, chat_id)
    
    if response and response.get("success"):
        await message.answer(
            "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    await state.clear()