from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from loguru import logger

from services.api_client import APIClient
from models.schemas import ProductCreate

router = Router()

class ProductStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_price = State()

@router.message(Command("products"))
async def cmd_products(message: Message, api_client: APIClient):
    products = await api_client.get_user_products(message.chat.id)
    
    if not products:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä.")
        return
    
    products_text = "\n".join(
        f"{idx + 1}. {product['name']} - ${product['price']:.2f}"
        for idx, product in enumerate(products)
    )
    
    await message.answer(
        f"üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n{products_text}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä."
    )

@router.message(Command("add_product"))
async def cmd_add_product(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ProductStates.waiting_for_product_name)

@router.message(ProductStates.waiting_for_product_name)
async def process_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductStates.waiting_for_product_price)

@router.message(ProductStates.waiting_for_product_price)
async def process_product_price(message: Message, state: FSMContext, api_client: APIClient):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
        return
    
    data = await state.get_data()
    product_data = ProductCreate(name=data['name'], price=price)
    
    product = await api_client.create_product(product_data, message.chat.id)
    
    if product:
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–¶–µ–Ω–∞: ${product['price']:.2f}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()